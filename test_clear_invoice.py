"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö OCR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ä‡∏±‡∏î
‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢ OCR engine ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
"""

from OCR import DocumentOCR
from pathlib import Path
import json

def test_ocr_engines(image_path):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö OCR ‡∏´‡∏•‡∏≤‡∏¢ engine"""
    
    if not Path(image_path).exists():
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {image_path}")
        print("\nüìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏•‡∏á‡πÉ‡∏ô:")
        print(f"   {Path(image_path).absolute()}")
        return
    
    print("=" * 80)
    print("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö OCR ‡∏´‡∏•‡∏≤‡∏¢ Engine")
    print("=" * 80)
    
    ocr = DocumentOCR()
    engines = ['tesseract', 'easyocr']
    
    best_result = None
    best_score = 0
    
    for engine in engines:
        print(f"\n{'='*80}")
        print(f"üîß Engine: {engine.upper()}")
        print(f"{'='*80}")
        
        try:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á enhancement on ‡πÅ‡∏•‡∏∞ off
            for enhance in [True, False]:
                enhance_label = "‡πÄ‡∏õ‡∏¥‡∏î Enhancement" if enhance else "‡∏õ‡∏¥‡∏î Enhancement"
                print(f"\nüìä {enhance_label}")
                print("-" * 80)
                
                result = ocr.process_and_parse_invoice(
                    image_path,
                    engine=engine,
                    enhance_images=enhance
                )
                
                if result.get('success'):
                    parsed_data = result['parsed_data']
                    ocr_text = result['raw_ocr_text']
                    
                    # ‡∏ô‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    filled_fields = {k: v for k, v in parsed_data.items() 
                                   if v and str(v).strip() and str(v).strip() != '0.00'}
                    
                    score = len(filled_fields)
                    
                    print(f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    print(f"üìù OCR Text: {len(ocr_text)} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
                    print(f"üìä ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡πÑ‡∏î‡πâ: {score}/{len(parsed_data)}")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
                    important_fields = {
                        'invoice_number': '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö',
                        'tax_id': '‡πÄ‡∏•‡∏Ç‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ',
                        'issue_date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
                        'organization': '‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£',
                        'subtotal': '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ',
                        'vat_amount': '‡∏†‡∏≤‡∏©‡∏µ VAT',
                        'total_amount': '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥',
                        'telephone': '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£'
                    }
                    
                    print("\nüîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡πÑ‡∏î‡πâ:")
                    for field, label in important_fields.items():
                        value = filled_fields.get(field, '‡πÑ‡∏°‡πà‡∏û‡∏ö')
                        status = "‚úÖ" if field in filled_fields else "‚ùå"
                        print(f"  {status} {label}: {value}")
                    
                    # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                    if score > best_score:
                        best_score = score
                        best_result = {
                            'engine': engine,
                            'enhancement': enhance,
                            'result': result,
                            'score': score
                        }
                    
                    # ‡πÅ‡∏™‡∏î‡∏á raw OCR text ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
                    print("\nüìÑ OCR Text (100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å):")
                    print("-" * 80)
                    print(ocr_text[:200].replace('\n', ' '))
                    print("...")
                    
                else:
                    print(f"‚ùå ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {result.get('error', 'Unknown error')}")
                    
        except Exception as e:
            print(f"‚ùå Error: {e}")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    if best_result:
        print("\n" + "=" * 80)
        print("üèÜ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
        print("=" * 80)
        print(f"Engine: {best_result['engine'].upper()}")
        print(f"Enhancement: {'‡πÄ‡∏õ‡∏¥‡∏î' if best_result['enhancement'] else '‡∏õ‡∏¥‡∏î'}")
        print(f"Score: {best_result['score']}/{len(best_result['result']['parsed_data'])} ‡∏ü‡∏¥‡∏•‡∏î‡πå")
        
        print("\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
        print("-" * 80)
        parsed_data = best_result['result']['parsed_data']
        for key, value in parsed_data.items():
            if value and str(value).strip() and str(value).strip() != '0.00':
                print(f"  ‚Ä¢ {key}: {value}")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        output_file = Path('test_results.json')
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(best_result['result'], f, ensure_ascii=False, indent=2, default=str)
        print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà: {output_file}")
        
    else:
        print("\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ")
    
    print("\n" + "=" * 80)

if __name__ == "__main__":
    # ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    test_image = "input/tax_invoice_clear.jpg"
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°
    if not Path(test_image).exists():
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå tax_invoice_clear.jpg")
        print("üîÑ ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏î‡∏¥‡∏°...")
        test_image = "input/f6f1a183-5b0b-4e47-8265-f9b0aa1b55e9.jpg"
    
    test_ocr_engines(test_image)
