"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö LLM-Enhanced OCR ‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ
‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á:
1. OCR + Rule-based Parser (‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
2. OCR + LLM Post-Processing (‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà)
"""

import sys
import json
from pathlib import Path
from OCR import DocumentOCR

def test_llm_enhanced_ocr():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö LLM-Enhanced OCR"""
    
    print("="*80)
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LLM-Enhanced OCR System")
    print("="*80)
    
    # ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_image = Path("input/clear_invoice_new.jpg")
    
    if not test_image.exists():
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {test_image}")
        print("üîÑ ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏î‡∏¥‡∏°...")
        test_image = Path("input/f6f1a183-5b0b-4e47-8265-f9b0aa1b55e9.jpg")
    
    if not test_image.exists():
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
        return
    
    print(f"üìÑ Testing with: {test_image.name}\n")
    
    # ===============================================================
    # TEST 1: ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ LLM)
    # ===============================================================
    print("\n" + "="*80)
    print("üìã TEST 1: OCR + Rule-based Parser (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ LLM)")
    print("="*80)
    
    ocr_system = DocumentOCR(use_llm=False)
    
    print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")
    result_no_llm = ocr_system.process_and_parse_invoice(
        file_path=str(test_image),
        engine='easyocr',
        enhance_images=False
    )
    
    print("\n‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ LLM):")
    print("-" * 80)
    
    parsed = result_no_llm.get('parsed_data', {})
    print(f"  üìã ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö: {parsed.get('invoice_number', '‡πÑ‡∏°‡πà‡∏û‡∏ö')}")
    print(f"  üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {parsed.get('issue_date', '‡πÑ‡∏°‡πà‡∏û‡∏ö')}")
    print(f"  üè¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó: {parsed.get('organization', '‡πÑ‡∏°‡πà‡∏û‡∏ö')[:60]}...")
    print(f"  üî¢ ‡πÄ‡∏•‡∏Ç‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ: {parsed.get('tax_id', '‡πÑ‡∏°‡πà‡∏û‡∏ö')}")
    print(f"  üìû ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: {parsed.get('telephone', '‡πÑ‡∏°‡πà‡∏û‡∏ö')}")
    print(f"  üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ: {parsed.get('subtotal', '‡πÑ‡∏°‡πà‡∏û‡∏ö')}")
    print(f"  üíµ ‡∏†‡∏≤‡∏©‡∏µ VAT: {parsed.get('vat_amount', '‡πÑ‡∏°‡πà‡∏û‡∏ö')}")
    print(f"  üí≥ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: {parsed.get('total_amount', '‡πÑ‡∏°‡πà‡∏û‡∏ö')}")
    
    filled_count = len([v for v in parsed.values() if v and str(v).strip()])
    print(f"\n  üìä ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {filled_count}/27")
    
    # ===============================================================
    # TEST 2: ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ä‡πâ LLM)
    # ===============================================================
    print("\n" + "="*80)
    print("üß† TEST 2: OCR + LLM Post-Processing (‡πÉ‡∏ä‡πâ LLM)")
    print("="*80)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key
    import os
    api_key = os.getenv("OPENAI_API_KEY")
    
    if not api_key:
        print("\n‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö OPENAI_API_KEY")
        print("üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key:")
        print("   Windows PowerShell:")
        print('   $env:OPENAI_API_KEY="sk-..."')
        print("\nüìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Rule-based Fallback...")
        
        # ‡πÉ‡∏ä‡πâ LLM ‡πÅ‡∏ö‡∏ö fallback (rule-based)
        ocr_system_llm = DocumentOCR(use_llm=True, llm_provider="openai")
    else:
        print("‚úÖ ‡∏û‡∏ö OPENAI_API_KEY")
        print("üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° LLM Processor...\n")
        ocr_system_llm = DocumentOCR(
            use_llm=True,
            llm_provider="openai",
            llm_model="gpt-4o-mini"
        )
    
    print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• (‡∏û‡∏£‡πâ‡∏≠‡∏° LLM)...")
    result_with_llm = ocr_system_llm.process_and_parse_invoice(
        file_path=str(test_image),
        engine='easyocr',
        enhance_images=False
    )
    
    print("\n‚ú® ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÉ‡∏ä‡πâ LLM):")
    print("-" * 80)
    
    parsed_llm = result_with_llm.get('parsed_data', {})
    print(f"  üìã ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö: {parsed_llm.get('invoice_number', '‡πÑ‡∏°‡πà‡∏û‡∏ö')}")
    print(f"  üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {parsed_llm.get('issue_date', '‡πÑ‡∏°‡πà‡∏û‡∏ö')}")
    print(f"  üè¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó: {parsed_llm.get('organization', '‡πÑ‡∏°‡πà‡∏û‡∏ö')[:60]}...")
    print(f"  üî¢ ‡πÄ‡∏•‡∏Ç‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ: {parsed_llm.get('tax_id', '‡πÑ‡∏°‡πà‡∏û‡∏ö')}")
    print(f"  üìû ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: {parsed_llm.get('telephone', '‡πÑ‡∏°‡πà‡∏û‡∏ö')}")
    print(f"  üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ: {parsed_llm.get('subtotal', '‡πÑ‡∏°‡πà‡∏û‡∏ö')}")
    print(f"  üíµ ‡∏†‡∏≤‡∏©‡∏µ VAT: {parsed_llm.get('vat_amount', '‡πÑ‡∏°‡πà‡∏û‡∏ö')}")
    print(f"  üí≥ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: {parsed_llm.get('total_amount', '‡πÑ‡∏°‡πà‡∏û‡∏ö')}")
    
    filled_count_llm = len([v for v in parsed_llm.values() if v and str(v).strip()])
    print(f"\n  üìä ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {filled_count_llm}/27")
    
    # ===============================================================
    # COMPARISON
    # ===============================================================
    print("\n" + "="*80)
    print("üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
    print("="*80)
    
    critical_fields = [
        ('invoice_number', '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö'),
        ('issue_date', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'),
        ('organization', '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó'),
        ('tax_id', '‡πÄ‡∏•‡∏Ç‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ'),
        ('subtotal', '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ'),
        ('vat_amount', '‡∏†‡∏≤‡∏©‡∏µ VAT'),
        ('total_amount', '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥')
    ]
    
    improvements = []
    for field, label in critical_fields:
        old_value = parsed.get(field, '')
        new_value = parsed_llm.get(field, '')
        
        # Check if improved
        if not old_value and new_value:
            improvements.append(f"‚úÖ {label}: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        elif old_value != new_value and new_value:
            # Check if it's actually better
            if field == 'invoice_number':
                if 'CT' in new_value or 'ct' in new_value:
                    improvements.append(f"‚ú® {label}: {old_value} ‚Üí {new_value}")
            elif field == 'issue_date':
                # Check year is reasonable
                if '2025' in new_value or '2024' in new_value:
                    improvements.append(f"‚ú® {label}: {old_value} ‚Üí {new_value}")
            elif field == 'organization':
                # Check if shorter and cleaner
                if len(new_value) < len(old_value) and '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó' in new_value:
                    improvements.append(f"‚ú® {label}: ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î")
            else:
                if new_value != old_value:
                    improvements.append(f"‚ú® {label}: {old_value} ‚Üí {new_value}")
    
    if improvements:
        print("\nüéØ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:")
        for imp in improvements:
            print(f"  {imp}")
    else:
        print("\nüìã ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡∏ç‡πà")
    
    print(f"\nüìà ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
    print(f"  ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ LLM: {filled_count}/27 ({filled_count/27*100:.1f}%)")
    print(f"  ‡πÉ‡∏ä‡πâ LLM:     {filled_count_llm}/27 ({filled_count_llm/27*100:.1f}%)")
    
    improvement_rate = ((filled_count_llm - filled_count) / 27 * 100)
    if improvement_rate > 0:
        print(f"  ‚¨ÜÔ∏è ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: +{improvement_rate:.1f}%")
    elif improvement_rate < 0:
        print(f"  ‚¨áÔ∏è ‡∏•‡∏î‡∏•‡∏á: {improvement_rate:.1f}%")
    else:
        print(f"  ‚û°Ô∏è ‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°")
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    comparison_result = {
        'test_image': str(test_image),
        'without_llm': {
            'filled_fields': filled_count,
            'data': parsed
        },
        'with_llm': {
            'filled_fields': filled_count_llm,
            'data': parsed_llm
        },
        'improvements': improvements,
        'improvement_rate': improvement_rate
    }
    
    output_file = Path("test_llm_comparison.json")
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(comparison_result, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö: {output_file}")
    print("\n" + "="*80)
    

if __name__ == "__main__":
    try:
        test_llm_enhanced_ocr()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    except Exception as e:
        print(f"\n\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()
